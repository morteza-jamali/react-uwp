{
  "exports": [
    {
      "name": "SplitViewCommand"
    },
    {
      "name": "NavigationComplexNode"
    },
    {
      "name": "NavigationNode"
    },
    {
      "name": "DataProps"
    },
    {
      "name": "NavigationViewProps"
    },
    {
      "name": "NavigationViewState"
    },
    {
      "name": "NavigationView"
    },
    {
      "name": "default",
      "extends": [
        "NavigationView"
      ]
    }
  ],
  "members": [
    {
      "name": "NavigationComplexNode",
      "members": [
        {
          "name": "default",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "expanded",
          "isRequired": false,
          "type": "ReactNode"
        }
      ]
    },
    {
      "name": "DataProps",
      "members": [
        {
          "name": "background",
          "documentation": "Set Navigation background.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "initWidth",
          "documentation": "Set Navigation width.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "expandedWidth",
          "documentation": "Set Navigation expanded width.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "defaultExpanded",
          "documentation": "Control Navigation expanded.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "topIcon",
          "documentation": "Replace TopIcon, default is NavButton.",
          "isRequired": false,
          "type": "ReactElement<any>"
        },
        {
          "name": "isControlled",
          "documentation": "Set NavigationView to controlled component.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "navigationTopNodes",
          "documentation": "Normal usage `SplitViewCommand[]`, different status use `{ default?: React.ReactNode, expanded?: React.ReactNode }`.",
          "isRequired": false,
          "type": "any[]"
        },
        {
          "name": "navigationBottomNodes",
          "documentation": "Normal usage `SplitViewCommand[]`, different status use `{ default?: React.ReactNode, expanded?: React.ReactNode }`.",
          "isRequired": false,
          "type": "any[]"
        },
        {
          "name": "displayMode",
          "documentation": "Three display control Navigation show mode.",
          "isRequired": false,
          "type": "\"overlay\" | \"compact\" | \"minimal\""
        },
        {
          "name": "pageTitle",
          "documentation": "The page title.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "paneStyle",
          "documentation": "The pane view style.",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "isTenFt",
          "documentation": "Usage TenFt Mode.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "autoResize",
          "documentation": "Auto change mode by window `onResize`.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "focusNavigationNodeIndex",
          "documentation": "Default focus `SplitViewCommand` item by `index`.",
          "isRequired": false,
          "type": "number"
        }
      ]
    },
    {
      "name": "NavigationViewProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "NavigationViewState",
      "members": [
        {
          "name": "expanded",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "focusNodeIndex",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "currDisplayMode",
          "isRequired": false,
          "type": "\"overlay\" | \"compact\" | \"minimal\""
        },
        {
          "name": "currInitWidth",
          "isRequired": false,
          "type": "number"
        }
      ]
    },
    {
      "name": "NavigationView",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    isTenFt: false,\n    autoResize: true,\n    initWidth: 48,\n    expandedWidth: 320,\n    displayMode: \"compact\"\n  }",
          "type": "NavigationViewProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    expanded: false,\n    focusNodeIndex: this.props.focusNavigationNodeIndex,\n    currDisplayMode: this.props.displayMode,\n    currInitWidth: this.props.initWidth\n  }",
          "type": "NavigationViewState"
        },
        {
          "name": "addBlurEvent",
          "initializerText": " new AddBlurEvent()",
          "type": "AddBlurEvent"
        },
        {
          "name": "paneElm",
          "type": "HTMLDivElement"
        },
        {
          "name": "context",
          "type": "{ theme: any; }"
        },
        {
          "name": "componentWillMount",
          "type": "() => void"
        },
        {
          "name": "addBlurEventMethod",
          "initializerText": " () => {\n    this.addBlurEvent.setConfig({\n      addListener: this.state.expanded,\n      clickExcludeElm: this.paneElm,\n      blurCallback: () => {\n        this.setState({\n          expanded: false\n        });\n      },\n      blurKeyCodes: [codes.esc]\n    });\n  }",
          "type": "() => void"
        },
        {
          "name": "componentDidMount",
          "type": "() => void"
        },
        {
          "name": "componentDidUpdate",
          "type": "() => void"
        },
        {
          "name": "shouldComponentUpdate",
          "type": "(nextProps: NavigationViewProps, nextState: NavigationViewState, nextContext: { theme: any; }) =>..."
        },
        {
          "name": "componentWillUnmount",
          "type": "() => void"
        },
        {
          "name": "autoResize",
          "initializerText": " (e?: Event) => {\n    if (window.innerWidth < 1280) {\n      if (this.state.currDisplayMode !== \"compact\") {\n        this.setState({\n          currDisplayMode: \"compact\",\n          currInitWidth: 0\n        });\n      }\n    } else {\n      if (this.state.currDisplayMode === \"compact\") {\n        this.setState({\n          currDisplayMode: \"minimal\",\n          currInitWidth: 48\n        });\n      }\n    }\n  }",
          "type": "(e?: Event) => void"
        },
        {
          "name": "updateProps2State",
          "initializerText": " ({ defaultExpanded }: NavigationViewProps) => {\n    if (defaultExpanded !== this.state.expanded) {\n      this.setState({ expanded: defaultExpanded });\n    }\n  }",
          "type": "({ defaultExpanded }: NavigationViewProps) => void"
        },
        {
          "name": "toggleExpanded",
          "initializerText": " (expanded?: boolean) => {\n    if (typeof expanded === \"boolean\" && expanded !== this.state.expanded) {\n      this.setState({ expanded });\n    } else {\n      this.setState((prevState, prevProps) => ({  expanded: !prevState.expanded }));\n    }\n  }",
          "type": "(expanded?: boolean) => void"
        },
        {
          "name": "getNewNodeProps",
          "initializerText": " (currNode: any, index: number, expanded?: boolean, haveExpandedNode?: boolean) => {\n    const { onClick } = currNode.props;\n    const { focusNodeIndex } = this.state;\n    return {\n      key: `${index} ${expanded}`,\n      visited: focusNodeIndex === void 0 ? void 0 : focusNodeIndex === index,\n      onClick: (e: any) => {\n        this.setState({\n          focusNodeIndex: index,\n          expanded: haveExpandedNode ? true : this.state.expanded\n        });\n        if (onClick) onClick(e);\n      }\n    };\n  }",
          "type": "(currNode: any, index: number, expanded?: boolean, haveExpandedNode?: boolean) => { key: string; ..."
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "type": "(NavigationView: NavigationView) => { root?: CSSProperties; pageTitle?: CSSProperties; paneParent..."
    }
  ],
  "type": "typeof \"D:/react-uwp/src/NavigationView/index\""
}