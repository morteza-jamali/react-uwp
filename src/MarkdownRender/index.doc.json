{
  "exports": [
    {
      "name": "DataProps"
    },
    {
      "name": "MarkdownRenderProps"
    },
    {
      "name": "MarkdownRender"
    },
    {
      "name": "default",
      "extends": [
        "MarkdownRender"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "text",
          "documentation": "The Markdown string.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "darkThemeCSSString",
          "documentation": "Use Custom Markdown CSS style in dark theme mode.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "lightThemeCSSString",
          "documentation": "Use Custom Markdown CSS style in light theme mode.",
          "isRequired": false,
          "type": "string"
        }
      ]
    },
    {
      "name": "MarkdownRenderProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "MarkdownRender",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "context",
          "type": "{ theme: any; }"
        },
        {
          "name": "componentWillMount",
          "type": "() => void"
        },
        {
          "name": "componentDidMount",
          "type": "() => void"
        },
        {
          "name": "componentDidUpdate",
          "type": "() => void"
        },
        {
          "name": "updateThemeStyle",
          "initializerText": " () => {\n    const { darkThemeCSSString, lightThemeCSSString } = this.props;\n    const { theme } = this.context;\n    let markdownStyleString: any;\n    if (theme.isDarkTheme) {\n      markdownStyleString = darkThemeCSSString || prismOkaidiaCSS;\n    } else {\n      markdownStyleString = lightThemeCSSString || prismCoyCSS;\n    }\n\n    const CSSText = getCSSText(theme, `react-uwp-markdown`) + \"\\n\" + markdownStyleString;\n    theme.styleManager.addCSSTextWithUpdate(CSSText);\n  }",
          "type": "() => void"
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getCSSText",
      "type": "(theme: any, className: string) => string"
    }
  ],
  "type": "typeof \"D:/react-uwp/src/MarkdownRender/index\""
}