{
  "exports": [
    {
      "name": "DataProps"
    },
    {
      "name": "TransformCardProps"
    },
    {
      "name": "TransformCardState"
    },
    {
      "name": "TransformCard"
    },
    {
      "name": "default",
      "extends": [
        "TransformCard"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "perspective",
          "documentation": "Set Car perspective.",
          "isRequired": false,
          "type": "string | number"
        },
        {
          "name": "xMaxRotate",
          "documentation": "Set the x rotate max deg.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "yMaxRotate",
          "documentation": "Set the y rotate max deg.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "defaultRotateX",
          "documentation": "Set the default rotateX.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "defaultRotateY",
          "documentation": "Set the default rotateY.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "leaveSpeed",
          "documentation": "Set mouse leave transition speed.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "leaveTimingFunction",
          "documentation": "Set mouse leave transition TimingFunction.",
          "isRequired": false,
          "type": "string"
        }
      ]
    },
    {
      "name": "TransformCardProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "TransformCardState",
      "members": [
        {
          "name": "isEnter",
          "isRequired": false,
          "type": "boolean"
        }
      ]
    },
    {
      "name": "TransformCard",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    perspective: 200,\n    xMaxRotate: 15,\n    yMaxRotate: 15,\n    defaultRotateX: 0,\n    defaultRotateY: 0,\n    leaveSpeed: 750,\n    leaveTimingFunction: \"\"\n  }",
          "type": "TransformCardProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {}",
          "type": "TransformCardState"
        },
        {
          "name": "context",
          "type": "{ theme: any; }"
        },
        {
          "name": "wrapperElm",
          "type": "HTMLDivElement"
        },
        {
          "name": "handleMouseMove",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n\n    const {\n      xMaxRotate,\n      yMaxRotate,\n      defaultRotateX,\n      defaultRotateY,\n      leaveSpeed,\n      leaveTimingFunction\n    } = this.props;\n    const { currentTarget, clientX, clientY } = e;\n    const { width, height, left, top } = currentTarget.getBoundingClientRect();\n    const xOffset = (left + width - clientX) / width;\n    const yOffset = (top + height - clientY) / height;\n\n    const transition = `all ${leaveSpeed}ms ${leaveTimingFunction ? \" \" + leaveTimingFunction : \"\"}`;\n    Object.assign(this.wrapperElm.style, {\n      transition: \"all 0ms\",\n      transform: `rotateX(${defaultRotateX + (yOffset - 0.5) * xMaxRotate}deg) rotateY(${defaultRotateY + (0.5 - xOffset) * yMaxRotate}deg)`\n    });\n  }",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handleMouseLeave",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    const {\n      defaultRotateX,\n      defaultRotateY,\n      leaveSpeed,\n      leaveTimingFunction\n    } = this.props;\n    const transition = `all ${leaveSpeed}ms ${leaveTimingFunction ? \" \" + leaveTimingFunction : \"\"}`;\n\n    Object.assign(this.wrapperElm.style, {\n      transition,\n      transform: `rotateX(${defaultRotateX}deg) rotateY(${defaultRotateY}deg)`\n    });\n  }",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "type": "(TransformCard: TransformCard) => { root: any; wrapper: any; }"
    }
  ],
  "type": "typeof \"D:/react-uwp/src/TransformCard/index\""
}