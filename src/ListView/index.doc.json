{
  "exports": [
    {
      "name": "ListItem"
    },
    {
      "name": "DataProps"
    },
    {
      "name": "ListViewProps"
    },
    {
      "name": "ListViewState"
    },
    {
      "name": "ListView"
    },
    {
      "name": "default",
      "extends": [
        "ListView"
      ]
    }
  ],
  "members": [
    {
      "name": "ListItem",
      "members": [
        {
          "name": "itemNode",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "disabled",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "focus",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "style",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "onClick",
          "isRequired": false,
          "type": "(e?: MouseEvent<HTMLDivElement>) => void"
        }
      ]
    },
    {
      "name": "DataProps",
      "members": [
        {
          "name": "listSource",
          "documentation": "ListSource Data.",
          "isRequired": false,
          "type": "ListItem[] | ReactNode[]"
        },
        {
          "name": "listItemStyle",
          "documentation": "`listItemStyle` will applied to all listItem.",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "onChooseItem",
          "documentation": "onChoose ListItem `callback`.",
          "isRequired": false,
          "type": "(itemIndex?: number) => void"
        },
        {
          "name": "defaultFocusListIndex",
          "documentation": "default focus List Item by `Index`.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "background",
          "documentation": "Set Custom Background.",
          "isRequired": false,
          "type": "string"
        }
      ]
    },
    {
      "name": "ListViewProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ListViewState",
      "members": [
        {
          "name": "focusIndex",
          "isRequired": false,
          "type": "number"
        }
      ]
    },
    {
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "type": "() => void"
    },
    {
      "name": "ListView",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    onChooseItem: emptyFunc\n  }",
          "type": "ListViewProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    focusIndex: this.props.defaultFocusListIndex\n  }",
          "type": "ListViewState"
        },
        {
          "name": "context",
          "type": "{ theme: any; }"
        },
        {
          "name": "rootElm",
          "type": "HTMLDivElement"
        },
        {
          "name": "inlineStyles",
          "initializerText": " null",
          "type": "{ [key: string]: CSSProperties; }"
        },
        {
          "name": "componentWillReceiveProps",
          "type": "(nextProps: ListViewProps) => void"
        },
        {
          "name": "getItemNode",
          "initializerText": " (itemNode: any, index: number, disabled?: boolean, focus?: boolean, style?: React.CSSProperties, onClick?: () => void) => {\n    const { inlineStyles } = this;\n    const { theme } = this.context;\n    const { onChooseItem, background } = this.props;\n    const { focusIndex } = this.state;\n    const { isDarkTheme } = theme;\n    const isFocus = focus || focusIndex === index;\n    const defaultBG = isFocus ? theme.listAccentLow : \"none\";\n    const focusBG = isFocus ? theme.listAccentHigh : (theme.useFluentDesign ? theme.acrylicTexture40.background : theme.listLow);\n    const clickBG = isFocus ? theme.accent : theme.chromeHigh;\n\n    const itemStyles = theme.prepareStyle({\n      className: \"list-view-item\",\n      style: theme.prefixStyle({\n        background: defaultBG,\n        color: disabled ? theme.baseLow : theme.baseHigh,\n        \"&:hover\": {\n          background: focusBG\n        },\n        \"&:active\": {\n          transform: \"scale(0.99)\"\n        },\n        ...inlineStyles.item,\n        ...style\n      })\n    });\n\n    return (\n      <PseudoClasses {...itemStyles} key={`${index}`}>\n        <div\n          onClick={onClick}\n          onMouseDown={disabled ? void 0 : e => {\n            onChooseItem(index);\n          }}\n        >\n          {itemNode}\n        </div>\n      </PseudoClasses>\n    );\n  }",
          "type": "(itemNode: any, index: number, disabled?: boolean, focus?: boolean, style?: CSSProperties, onClic..."
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "type": "(listView: ListView) => { root?: CSSProperties; item?: CSSProperties; }"
    }
  ],
  "type": "typeof \"D:/react-uwp/src/ListView/index\""
}