{
  "exports": [
    {
      "name": "DataProps"
    },
    {
      "name": "MediaPlayerProps"
    },
    {
      "name": "MediaPlayerState"
    },
    {
      "name": "MediaPlayer"
    },
    {
      "name": "default",
      "extends": [
        "MediaPlayer"
      ]
    }
  ],
  "members": [
    {
      "name": "ReactPlayer",
      "type": "any",
      "initializerText": " RPlayer.default as any"
    },
    {
      "name": "ReactPlayer",
      "type": "any"
    },
    {
      "name": "DataProps",
      "members": [
        {
          "name": "displayMode",
          "documentation": "Set MediaPlayer display mode.",
          "isRequired": false,
          "type": "\"default\" | \"minimum\" | \"reset\""
        },
        {
          "name": "showControl",
          "documentation": "Control show the MediaPlayer controls.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "url",
          "documentation": "The url of a video or song to play.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "width",
          "documentation": "Sets the width of the player.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "height",
          "documentation": "Sets the height of the player.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "playing",
          "documentation": "Set to `true` or `false` to pause or play the media.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "loop",
          "documentation": "Set to `true` or `false` to loop the media.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "controls",
          "documentation": "Set to `true` or `false` to display native player controls<br />*Note: Vimeo player controls are not configurable and will always display*",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "volume",
          "documentation": "Sets the volume of the appropriate player.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "playbackRate",
          "documentation": "Sets the playback rate of the appropriate player.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "progressFrequency",
          "documentation": "The time between `onProgress` callbacks, in milliseconds.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "soundcloudConfig",
          "documentation": "Configuration object for the SoundCloud player.<br />Set `clientId` to your own SoundCloud app [client Id](https://soundcloud.com/you/apps).<br />Set `showArtwork` to `false` to not load any artwork to display.",
          "isRequired": false,
          "type": "{ clientId: string; showArtwork: boolean; }"
        },
        {
          "name": "youtubeConfig",
          "documentation": "Configuration object for the YouTube player.<br />Set `playerVars` to override the [default player vars](https://developers.google.com/youtube/player_parameters?playerVersion=HTML5).<br />Set `preload` for [preloading](#preloading).",
          "isRequired": false,
          "type": "{ playerVars: Object; preload: boolean; }"
        },
        {
          "name": "vimeoConfig",
          "documentation": "Configuration object for the Vidme player.<br />Set `format` to use a certain quality of video, when available.",
          "isRequired": false,
          "type": "{ iframeParams: Object; preload: boolean; }"
        },
        {
          "name": "fileConfig",
          "documentation": "Configuration object for the file player.<br />Set `attributes` to apply [element attributes](https://developer.mozilla.org/en/docs/Web/HTML/Element/video#Attributes).",
          "isRequired": false,
          "type": "{ attributes: Object; }"
        },
        {
          "name": "onReady",
          "documentation": "Called when media is loaded and ready to play. If `playing` is set to `true`, media will play immediately.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onStart",
          "documentation": "Called when media starts playing.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onPlay",
          "documentation": "Called when media starts or resumes playing after pausing or buffering.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onPause",
          "documentation": "Called when media is paused.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onBuffer",
          "documentation": "Called when media starts buffering.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onEnded",
          "documentation": "Called when media finishes playing.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onError",
          "documentation": "Called when an error occurs whilst attempting to play media.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onDuration",
          "documentation": "Callback containing duration of the media, in seconds.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onProgress",
          "documentation": "Callback containing progress `played`, `loaded` (fraction), `playedSeconds` and `loadedSeconds`.",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "className",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "style",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "onTouchStart",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onMouseEnter",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onMouseLeave",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        },
        {
          "name": "onMouseMove",
          "isRequired": false,
          "type": "EventHandler<SyntheticEvent<HTMLDivElement>>"
        }
      ]
    },
    {
      "name": "MediaPlayerProps",
      "extends": [
        "DataProps"
      ]
    },
    {
      "name": "MediaPlayerState",
      "members": [
        {
          "name": "currShowControl",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "currPlaying",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "currVolume",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "currPlayed",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "currLoaded",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "currPlaybackRate",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "fullScreenMode",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "duration",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "played",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "loaded",
          "isRequired": false,
          "type": "number"
        }
      ]
    },
    {
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "type": "() => void"
    },
    {
      "name": "MediaPlayer",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    displayMode: \"default\",\n    width: 640,\n    height: 360,\n    loop: false,\n    showControl: true,\n    playing: false,\n    volume: 0.8,\n    playbackRate: 1.0,\n    onTouchStart: emptyFunc,\n    onMouseEnter: emptyFunc,\n    onMouseLeave: emptyFunc,\n    onMouseMove: emptyFunc\n  }",
          "type": "MediaPlayerProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "getProps2State",
          "initializerText": " (props: MediaPlayerProps): MediaPlayerState => ({\n    currShowControl: props.showControl,\n    currPlaying: props.playing,\n    currVolume: props.volume,\n    currPlaybackRate: props.playbackRate\n  })",
          "type": "(props: MediaPlayerProps) => MediaPlayerState"
        },
        {
          "name": "state",
          "initializerText": " Object.assign({\n    currShowControl: false,\n    currPlaying: false,\n    currVolume: 0.8,\n    currPlayed: 0,\n    currLoaded: 0,\n    currPlaybackRate: 1.0\n  }, this.getProps2State(this.props))",
          "type": "MediaPlayerState"
        },
        {
          "name": "componentWillReceiveProps",
          "type": "(nextProps: MediaPlayerProps) => void"
        },
        {
          "name": "rootElm",
          "type": "HTMLDivElement"
        },
        {
          "name": "showControlTimer",
          "initializerText": " null",
          "type": "any"
        },
        {
          "name": "mouseMoveTimer",
          "initializerText": " null",
          "type": "any"
        },
        {
          "name": "endTimer",
          "initializerText": " null",
          "type": "any"
        },
        {
          "name": "reactPlayer",
          "type": "any"
        },
        {
          "name": "context",
          "type": "{ theme: any; }"
        },
        {
          "name": "componentDidMount",
          "type": "() => void"
        },
        {
          "name": "componentWillUnmount",
          "type": "() => void"
        },
        {
          "name": "componentWillUpdate",
          "type": "() => void"
        },
        {
          "name": "handleMouseEnter",
          "initializerText": " (e?: React.MouseEvent<HTMLDivElement>) => {\n    clearTimeout(this.showControlTimer);\n    this.toggleShowControl(true);\n    this.props.onMouseEnter(e);\n  }",
          "type": "(e?: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handleMouseLeave",
          "initializerText": " (e?: React.MouseEvent<HTMLDivElement>) => {\n    this.showControlTimer = setTimeout(() => {\n      this.toggleShowControl(false);\n    }, 3500);\n    this.props.onMouseLeave(e);\n  }",
          "type": "(e?: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handleMouseMove",
          "initializerText": " (e?: React.MouseEvent<HTMLDivElement>) => {\n    clearTimeout(this.mouseMoveTimer);\n    clearTimeout(this.showControlTimer);\n    this.mouseMoveTimer = setTimeout(() => {\n      this.toggleShowControl(true);\n    }, 200);\n    this.showControlTimer = setTimeout(() => {\n      this.toggleShowControl(false);\n    }, 3500);\n    this.props.onMouseMove(e);\n  }",
          "type": "(e?: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handleTouchStart",
          "initializerText": " (e?: React.TouchEvent<HTMLDivElement>) => {\n    this.toggleShowControl(true);\n    this.props.onTouchStart(e);\n  }",
          "type": "(e?: TouchEvent<HTMLDivElement>) => void"
        },
        {
          "name": "toggleShowControl",
          "initializerText": " (currShowControl?: any) => {\n    if (typeof currShowControl === \"boolean\") {\n      if (currShowControl !== this.state.currShowControl) {\n        this.setState({ currShowControl });\n      }\n    } else {\n      this.setState((prevState, prevProps) => ({\n        currShowControl: !prevState.currShowControl\n      }));\n    }\n  }",
          "type": "(currShowControl?: any) => void"
        },
        {
          "name": "togglePlaying",
          "initializerText": " (currPlaying?: any) => {\n    if (typeof currPlaying === \"boolean\") {\n      if (currPlaying !== this.state.currPlaying) {\n        this.setState({ currPlaying });\n      }\n    } else {\n      this.setState((prevState, prevProps) => ({\n        currPlaying: !prevState.currPlaying\n      }));\n    }\n  }",
          "type": "(currPlaying?: any) => void"
        },
        {
          "name": "handleFullScreenAction",
          "initializerText": " () => {\n    if (this.state.fullScreenMode) {\n      this.existFullscreen();\n    }\n    const rootElm: any = findDOMNode(this.reactPlayer).children[0];\n    if (rootElm.requestFullscreen) {\n      rootElm.requestFullscreen();\n    } else if (rootElm.msRequestFullscreen) {\n      rootElm.msRequestFullscreen();\n    } else if (rootElm.mozRequestFullScreen) {\n      rootElm.mozRequestFullScreen();\n    } else if (rootElm.webkitRequestFullscreen) {\n      rootElm.webkitRequestFullscreen();\n    }\n    this.setState({ currShowControl: true });\n  }",
          "type": "() => void"
        },
        {
          "name": "existFullscreen",
          "initializerText": " () => {\n    let document: any = window.document;\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n  }",
          "type": "() => void"
        },
        {
          "name": "handleKeyDown",
          "initializerText": " (e: KeyboardEvent) => {\n    if (e.keyCode === 13 || e.keyCode === 27) {\n      this.existFullscreen();\n    }\n  }",
          "type": "(e: KeyboardEvent) => void"
        },
        {
          "name": "exitFullScreen",
          "initializerText": " () => {\n    let document: any = window.document;\n    const haveFullScreenElm = document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement !== null;\n    if (haveFullScreenElm) {\n      this.setState((prevState, prevProps) => ({ fullScreenMode: !this.state.fullScreenMode }));\n    }\n  }",
          "type": "() => void"
        },
        {
          "name": "handleEnded",
          "initializerText": " () => {\n    this.endTimer = setTimeout(() => {\n      this.setState({\n        currPlaying: false,\n        currShowControl: true,\n        played: 0\n      });\n    }, 1000);\n  }",
          "type": "() => void"
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "type": "(mock: MediaPlayer) => { root?: CSSProperties; }"
    }
  ],
  "type": "typeof \"D:/react-uwp/src/MediaPlayer/index\""
}