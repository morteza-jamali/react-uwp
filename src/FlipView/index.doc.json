{
  "exports": [
    {
      "name": "DataProps"
    },
    {
      "name": "FlipViewProps"
    },
    {
      "name": "FlipViewState"
    },
    {
      "name": "FlipView"
    },
    {
      "name": "default",
      "extends": [
        "FlipView"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "initialFocusIndex",
          "documentation": "default init Show item `children[initialFocusIndex]`.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "stopSwipe",
          "documentation": "Control FlipView can Swipe or not.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "autoSwipe",
          "documentation": "Control FlipView auto swipe.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "speed",
          "documentation": "FlipView auto swipe speed.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "easy",
          "documentation": "FlipView is phone mod swipe to next easier `0 < easy < 1`.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "direction",
          "documentation": "FlipView layout.",
          "isRequired": false,
          "type": "\"vertical\" | \"horizontal\""
        },
        {
          "name": "showNavigation",
          "documentation": "Control show FlipView navigation.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "controlledNavigation",
          "documentation": "if `true`, remove `MouseEvent` control show navigation.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "showControl",
          "documentation": "Control show FlipView control.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "supportPcDrag",
          "documentation": "FlipView can drag in PC mode (in the experiment).",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "navigationIconSize",
          "documentation": "navigation `iconSize`.",
          "isRequired": false,
          "type": "number"
        }
      ]
    },
    {
      "name": "FlipViewProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "FlipViewState",
      "members": [
        {
          "name": "focusSwipeIndex",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "currCanAutoSwipe",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "currShowNavigation",
          "isRequired": false,
          "type": "boolean"
        }
      ]
    },
    {
      "name": "FlipView",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    direction: \"horizontal\",\n    autoSwipe: true,\n    navigationIconSize: 24,\n    showNavigation: true,\n    controlledNavigation: true,\n    showControl: true,\n    supportPcDrag: false,\n    stopSwipe: false\n  }",
          "type": "FlipViewProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "context",
          "type": "{ theme: any; }"
        },
        {
          "name": "state",
          "initializerText": " {\n    focusSwipeIndex: 0,\n    currCanAutoSwipe: this.props.autoSwipe,\n    currShowNavigation: this.props.showNavigation\n  }",
          "type": "FlipViewState"
        },
        {
          "name": "mounted",
          "initializerText": " false",
          "type": "boolean"
        },
        {
          "name": "rootElm",
          "type": "HTMLDivElement"
        },
        {
          "name": "swipe",
          "type": "any"
        },
        {
          "name": "dots",
          "type": "any"
        },
        {
          "name": "swipeForward",
          "initializerText": " () => {\n    this.swipe.swipeForward();\n  }",
          "type": "() => void"
        },
        {
          "name": "swipeBackWord",
          "initializerText": " () => {\n    this.swipe.swipeBackWord();\n  }",
          "type": "() => void"
        },
        {
          "name": "componentDidMount",
          "type": "() => void"
        },
        {
          "name": "shouldComponentUpdate",
          "type": "(nextProps: FlipViewProps, nextState: FlipViewState) => boolean"
        },
        {
          "name": "handleChangeSwipe",
          "initializerText": " (focusSwipeIndex: number) => {\n    const count = React.Children.count(this.props.children);\n    if (this.mounted) {\n      this.setState({ focusSwipeIndex: focusSwipeIndex % count });\n    }\n  }",
          "type": "(focusSwipeIndex: number) => void"
        },
        {
          "name": "toggleCanAutoSwipe",
          "initializerText": " (currCanAutoSwipe?: any) => {\n    if (typeof currCanAutoSwipe === \"boolean\") {\n      if (currCanAutoSwipe !== this.state.currCanAutoSwipe) {\n        this.setState({ currCanAutoSwipe });\n      }\n    } else {\n      this.setState((prevState, prevProps) => ({\n        currCanAutoSwipe: !prevState.currCanAutoSwipe\n      }));\n    }\n  }",
          "type": "(currCanAutoSwipe?: any) => void"
        },
        {
          "name": "handleSwipeToIndex",
          "initializerText": " (index: number) => {\n    this.setState({ focusSwipeIndex: index });\n    this.swipe.swipeToIndex(index);\n  }",
          "type": "(index: number) => void"
        },
        {
          "name": "handleMouseEnter",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!this.state.currShowNavigation) {\n      this.setState({\n        currShowNavigation: true\n      });\n    }\n  }",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handleMouseLeave",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    if (this.state.currShowNavigation) {\n      this.setState({\n        currShowNavigation: false\n      });\n    }\n  }",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "type": "(flipView: FlipView) => { root?: CSSProperties; iconLeft?: CSSProperties; iconRight?: CSSProperti..."
    }
  ],
  "type": "typeof \"D:/react-uwp/src/FlipView/index\""
}