{
  "exports": [
    {
      "name": "DataProps"
    },
    {
      "name": "ContentDialogProps"
    },
    {
      "name": "ContentDialogState"
    },
    {
      "name": "ContentDialog"
    },
    {
      "name": "default",
      "extends": [
        "ContentDialog"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "statusBarTitle",
          "documentation": "If set `statusBarTitle` to string, will render `StatusBar`.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "showCloseButton",
          "documentation": "default is `false`, is set close button show.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "title",
          "documentation": "ContentDialog `title`.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "content",
          "documentation": "ContentDialog `content`.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "contentNode",
          "documentation": "ContentDialog `content Node`.",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "primaryButtonText",
          "documentation": "primaryButton `text`.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "secondaryButtonText",
          "documentation": "secondaryButton `text`.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "defaultShow",
          "documentation": "controlled `ContentDialog` show.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "closeButtonAction",
          "documentation": "closeButton `click callback`.",
          "isRequired": false,
          "type": "(e: MouseEvent<HTMLButtonElement>) => void"
        },
        {
          "name": "primaryButtonAction",
          "documentation": "primaryButton `click callback`.",
          "isRequired": false,
          "type": "(e: MouseEvent<HTMLButtonElement>) => void"
        },
        {
          "name": "secondaryButtonAction",
          "documentation": "secondaryButton `click callback`.",
          "isRequired": false,
          "type": "(e: MouseEvent<HTMLButtonElement>) => void"
        },
        {
          "name": "onCloseDialog",
          "documentation": "callback run end close dialog.",
          "isRequired": false,
          "type": "() => void"
        },
        {
          "name": "background",
          "documentation": "Set custom background.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "padding",
          "documentation": "Set ContentDialog inside padding.",
          "isRequired": false,
          "type": "number"
        }
      ]
    },
    {
      "name": "ContentDialogProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ContentDialogState",
      "members": [
        {
          "name": "showDialog",
          "isRequired": false,
          "type": "boolean"
        }
      ]
    },
    {
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "type": "() => void"
    },
    {
      "name": "iconButtonHoverStyle",
      "type": "{ background: string; color: string; }",
      "initializerText": " { background: \"#d00f2a\", color: \"#fff\" }"
    },
    {
      "name": "iconButtonHoverStyle",
      "type": "{ background: string; color: string; }"
    },
    {
      "name": "ContentDialog",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    primaryButtonText: \"Delete\",\n    secondaryButtonText: \"Cancel\",\n    closeButtonAction: emptyFunc,\n    primaryButtonAction: emptyFunc,\n    secondaryButtonAction: emptyFunc,\n    onCloseDialog: emptyFunc,\n    padding: 16\n  }",
          "type": "ContentDialogProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    showDialog: this.props.defaultShow\n  }",
          "type": "ContentDialogState"
        },
        {
          "name": "addBlurEvent",
          "initializerText": " new AddBlurEvent()",
          "type": "AddBlurEvent"
        },
        {
          "name": "context",
          "type": "{ theme: any; }"
        },
        {
          "name": "renderToBody",
          "type": "any"
        },
        {
          "name": "rootElm",
          "type": "HTMLDivElement"
        },
        {
          "name": "shouldComponentUpdate",
          "type": "(nextProps: ContentDialogProps, nextState: ContentDialogState) => boolean"
        },
        {
          "name": "addBlurEventMethod",
          "initializerText": " () => {\n    this.addBlurEvent.setConfig({\n      addListener: this.state.showDialog,\n      clickExcludeElm: this.rootElm,\n      blurCallback: () => {\n        this.setState({\n          showDialog: false\n        });\n        this.props.onCloseDialog();\n      },\n      blurKeyCodes: [codes.esc]\n    });\n  }",
          "type": "() => void"
        },
        {
          "name": "componentDidMount",
          "type": "() => void"
        },
        {
          "name": "componentDidUpdate",
          "type": "() => void"
        },
        {
          "name": "componentWillUnmount",
          "type": "() => void"
        },
        {
          "name": "containerMouseEnterHandle",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    e.currentTarget.style.border = `1px solid ${this.context.theme.accent}`;\n  }",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "containerMouseLeaveHandle",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    e.currentTarget.style.border = `1px solid ${this.context.theme.baseLow}`;\n  }",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "closeDialog",
          "initializerText": " () => {\n    this.setState({ showDialog: false });\n    this.props.onCloseDialog();\n  }",
          "type": "() => void"
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "type": "(contentDialog: ContentDialog) => { mask?: CSSProperties; container?: CSSProperties; statusBar?: ..."
    }
  ],
  "type": "typeof \"D:/react-uwp/src/ContentDialog/index\""
}