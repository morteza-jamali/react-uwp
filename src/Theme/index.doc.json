{
  "exports": [
    {
      "name": "getTheme"
    },
    {
      "name": "DataProps"
    },
    {
      "name": "ThemeProps"
    },
    {
      "name": "ThemeState"
    },
    {
      "name": "Theme"
    },
    {
      "name": "default",
      "extends": [
        "Theme"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "theme",
          "documentation": "Set theme object. [ThemeType](https://github.com/myxvisual/react-uwp/blob/master/typings/index.d.ts#L43), Usually use [getTheme](https://github.com/myxvisual/react-uwp/blob/master/src/styles/getTheme.ts#L28) function to get it.",
          "isRequired": false,
          "type": "prototype"
        },
        {
          "name": "autoSaveTheme",
          "documentation": "For simple development, autoSaveTheme can read and save theme to `localStorage`. use global context `theme.saveTheme` method to save.",
          "isRequired": false,
          "type": "prototype"
        },
        {
          "name": "themeWillUpdate",
          "documentation": "set theme will update callback.",
          "isRequired": false,
          "type": "prototype"
        },
        {
          "name": "onGeneratedAcrylic",
          "documentation": "onGeneratedAcrylic callback, base acrylic textures is base64 url image, for production, you can set this callback, post image to your server, and update theme(use this callback will not auto update theme).",
          "isRequired": false,
          "type": "prototype"
        },
        {
          "name": "needGenerateAcrylic",
          "documentation": "for production if you have generated acrylic textures, you can disabled generation acrylic textures.",
          "isRequired": false,
          "type": "prototype"
        },
        {
          "name": "scrollBarStyleSelector",
          "documentation": "default is \"*\", set all element scroll bar style to uwp style.",
          "isRequired": false,
          "type": "prototype"
        }
      ]
    },
    {
      "name": "ThemeProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ThemeState",
      "members": [
        {
          "name": "currTheme",
          "isRequired": false,
          "type": "prototype"
        }
      ]
    },
    {
      "name": "customLocalStorageName",
      "type": "\"__REACT_UWP__\"",
      "initializerText": " \"__REACT_UWP__\""
    },
    {
      "name": "customLocalStorageName",
      "type": "\"__REACT_UWP__\""
    },
    {
      "name": "baseClassName",
      "type": "\"react-uwp-theme\"",
      "initializerText": " \"react-uwp-theme\""
    },
    {
      "name": "baseClassName",
      "type": "\"react-uwp-theme\""
    },
    {
      "name": "themeCallback",
      "type": "(theme?: any) => void",
      "initializerText": " () => {}"
    },
    {
      "name": "themeCallback",
      "type": "(theme?: any) => void"
    },
    {
      "name": "Theme",
      "exports": [
        {
          "name": "prototype",
          "type": "any"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    needGenerateAcrylic: true,\n    onGeneratedAcrylic: themeCallback,\n    themeWillUpdate: themeCallback,\n    scrollBarStyleSelector: \"*\"\n  }",
          "type": "ThemeProps"
        },
        {
          "name": "childContextTypes",
          "initializerText": " {\n    theme: PropTypes.object\n  }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "acrylicTextureCount",
          "initializerText": " 0",
          "type": "number"
        },
        {
          "name": "themeClassName",
          "initializerText": " \"react-uwp-theme-dark\"",
          "type": "string"
        },
        {
          "name": "cacheDarkAcrylicTextures",
          "type": "any"
        },
        {
          "name": "cacheLightAcrylicTextures",
          "type": "any"
        },
        {
          "name": "toastWrapper",
          "type": "any"
        },
        {
          "name": "prevStyleManager",
          "initializerText": " null",
          "type": "StyleManager"
        },
        {
          "name": "getDefaultTheme",
          "initializerText": " () => {\n    let { theme, autoSaveTheme } = this.props;\n\n    if (!IS_NODE_ENV && autoSaveTheme && !theme) {\n      theme = this.getLocalStorageTheme();\n    } else {\n      theme = theme || darkTheme;\n    }\n\n    return theme;\n  }",
          "type": "() => any"
        },
        {
          "name": "getLocalStorageTheme",
          "initializerText": " () => {\n    let themeConfig: any = {};\n    let { theme } = this.props;\n\n    if (theme) {\n      Object.assign(themeConfig, {\n        themeName: theme.themeName,\n        accent: theme.accent,\n        useFluentDesign: theme.useFluentDesign,\n        desktopBackgroundImage: theme.desktopBackgroundImage\n      });\n    }\n\n    const storageString = localStorage.getItem(customLocalStorageName);\n    if (storageString) {\n      let data: any = {};\n      try {\n        data = JSON.parse(storageString);\n        const { themeName, accent, useFluentDesign, desktopBackgroundImage } = data;\n        theme = getTheme({\n          themeName: themeName === void 0 ? themeConfig.themeName : themeName,\n          accent: accent === void 0 ? themeConfig.accent : accent,\n          useFluentDesign: useFluentDesign === void 0 ? themeConfig.useFluentDesign : useFluentDesign,\n          desktopBackgroundImage: desktopBackgroundImage === void 0 ? themeConfig.desktopBackgroundImage : desktopBackgroundImage\n        });\n      } catch (error) {\n        theme = this.props.theme || darkTheme;\n      }\n    } else {\n      theme = this.props.theme || darkTheme;\n    }\n\n    return theme;\n  }",
          "type": "() => any"
        },
        {
          "name": "generateAcrylicTextures",
          "initializerText": " (currTheme: ReactUWP.ThemeType, themeCallback?: (theme?: ReactUWP.ThemeType) => void) => {\n    const { onGeneratedAcrylic } = this.props;\n    this.acrylicTextureCount = 0;\n    const baseConfig = {\n      blurSize: 24,\n      noiseSize: 1,\n      noiseOpacity: 0.2\n    };\n    let backgrounds: string[] = [];\n\n    const callback = (image: string, key: number) => {\n      if (key === 4) {\n        this.acrylicTextureCount += 1;\n        Object.assign(currTheme.acrylicTexture40, {\n          tintColor: currTheme.chromeMediumLow,\n          tintOpacity: 0.4,\n          background: `url(${image}) no-repeat fixed top left / cover`,\n          ...baseConfig\n        });\n      }\n      if (key === 6) {\n        this.acrylicTextureCount += 1;\n        Object.assign(currTheme.acrylicTexture60, {\n          tintColor: currTheme.chromeLow,\n          tintOpacity: 0.6,\n          background: `url(${image}) no-repeat fixed top left / cover`,\n          ...baseConfig\n        });\n      }\n      if (key === 8) {\n        this.acrylicTextureCount += 1;\n        Object.assign(currTheme.acrylicTexture80, {\n          tintColor: currTheme.chromeLow,\n          tintOpacity: 0.8,\n          background: `url(${image}) no-repeat fixed top left / cover`,\n          ...baseConfig\n        });\n      }\n\n      if (this.acrylicTextureCount === 3) {\n        currTheme.haveAcrylicTextures = true;\n        onGeneratedAcrylic(currTheme);\n        if (themeCallback) themeCallback(currTheme);\n        return currTheme;\n      }\n    };\n\n    generateAcrylicTexture(\n      currTheme.desktopBackgroundImage,\n      currTheme.chromeMediumLow,\n      0.4,\n      void 0,\n      void 0,\n      void 0,\n      image => callback(image, 4)\n    );\n    generateAcrylicTexture(\n      currTheme.desktopBackgroundImage,\n      currTheme.chromeLow,\n      0.6,\n      void 0,\n      void 0,\n      void 0,\n      image => callback(image, 6)\n    );\n    generateAcrylicTexture(\n      currTheme.desktopBackgroundImage,\n      currTheme.chromeLow,\n      0.8,\n      void 0,\n      void 0,\n      void 0,\n      image => callback(image, 8)\n    );\n  }",
          "type": "(currTheme: any, themeCallback?: (theme?: any) => void) => void"
        },
        {
          "name": "bindNewThemeMethods",
          "initializerText": " (theme: ReactUWP.ThemeType) => {\n    const { scrollBarStyleSelector } = this.props;\n    const styleManager =  new StyleManager({ theme });\n    styleManager.addCSSTextWithUpdate(getBaseCSSText(theme, \"uwp-base\", scrollBarStyleSelector));\n    Object.assign(theme, {\n      desktopBackground: `url(${theme.desktopBackgroundImage}) no-repeat fixed top left / cover`,\n      updateTheme: this.updateTheme,\n      saveTheme: this.saveTheme,\n      addToast: this.addToast,\n      updateToast: this.updateToast,\n      deleteToast: this.deleteToast,\n      scrollRevealListener: this.handleScrollReveal,\n      generateAcrylicTextures: this.generateAcrylicTextures,\n      forceUpdateTheme: this.forceUpdateTheme,\n      styleManager\n    } as ReactUWP.ThemeType);\n  }",
          "type": "(theme: any) => void"
        },
        {
          "name": "handleNewTheme",
          "initializerText": " (theme: ReactUWP.ThemeType) => {\n    this.props.themeWillUpdate(theme);\n  }",
          "type": "(theme: any) => void"
        },
        {
          "name": "state",
          "initializerText": " {\n    currTheme: (() => {\n      const theme = this.getDefaultTheme();\n      this.handleNewTheme(theme);\n      return theme;\n    })()\n  }",
          "type": "ThemeState"
        },
        {
          "name": "getChildContext",
          "type": "() => { theme: any; }"
        },
        {
          "name": "componentDidMount",
          "type": "() => void"
        },
        {
          "name": "componentWillReceiveProps",
          "type": "(nextProps: ThemeProps) => void"
        },
        {
          "name": "componentWillUpdate",
          "type": "(nextProps: ThemeProps, nextState: ThemeState) => void"
        },
        {
          "name": "componentDidUpdate",
          "type": "() => void"
        },
        {
          "name": "componentWillUnmount",
          "type": "() => void"
        },
        {
          "name": "updateTheme",
          "initializerText": " (newTheme?: ReactUWP.ThemeType, callback = themeCallback) => {\n    const needGenerateAcrylic = this.sureNeedGenerateAcrylic(newTheme);\n\n    this.handleNewTheme(newTheme);\n    this.setState({\n      currTheme: newTheme\n    }, () => {\n      callback(newTheme);\n      if (needGenerateAcrylic) {\n        this.handleNewTheme(newTheme);\n        this.generateAcrylicTextures(newTheme, currTheme => this.setState({ currTheme }));\n      }\n    });\n  }",
          "type": "(newTheme?: any, callback?: (theme?: any) => void) => void"
        },
        {
          "name": "forceUpdateTheme",
          "initializerText": " (currTheme: ReactUWP.ThemeType) => this.setState({ currTheme })",
          "type": "(currTheme: any) => void"
        },
        {
          "name": "saveTheme",
          "initializerText": " (newTheme?: ReactUWP.ThemeType, callback = themeCallback) => {\n    localStorage.setItem(customLocalStorageName, JSON.stringify({\n      themeName: newTheme.themeName,\n      accent: newTheme.accent,\n      useFluentDesign: newTheme.useFluentDesign,\n      desktopBackgroundImage: newTheme.desktopBackgroundImage\n    }));\n\n    const needGenerateAcrylic = this.sureNeedGenerateAcrylic(newTheme);\n\n    this.handleNewTheme(newTheme);\n    this.setState({\n      currTheme: newTheme\n    }, () => {\n      callback(newTheme);\n      if (needGenerateAcrylic) {\n        this.handleNewTheme(newTheme);\n        this.generateAcrylicTextures(newTheme, currTheme => this.setState({ currTheme }));\n      }\n    });\n  }",
          "type": "(newTheme?: any, callback?: (theme?: any) => void) => void"
        },
        {
          "name": "sureNeedGenerateAcrylic",
          "initializerText": " (newTheme: ReactUWP.ThemeType): boolean => {\n    const { currTheme } = this.state;\n    let needGenerateAcrylic = newTheme.desktopBackgroundImage && this.props.needGenerateAcrylic;\n\n    if (needGenerateAcrylic &&\n      newTheme.desktopBackgroundImage === currTheme.desktopBackgroundImage\n    ) {\n      if (currTheme.useFluentDesign) {\n        Object.assign(currTheme.isDarkTheme ? this.cacheDarkAcrylicTextures : this.cacheLightAcrylicTextures, {\n          acrylicTexture40: currTheme.acrylicTexture40,\n          acrylicTexture60: currTheme.acrylicTexture60,\n          acrylicTexture80: currTheme.acrylicTexture80\n        } as ReactUWP.ThemeType);\n        needGenerateAcrylic = false;\n      }\n      if (newTheme.useFluentDesign) {\n        if (newTheme.isDarkTheme && this.cacheDarkAcrylicTextures.acrylicTexture40 || (\n          !newTheme.isDarkTheme && this.cacheLightAcrylicTextures.acrylicTexture40\n        )) {\n          Object.assign(newTheme, newTheme.isDarkTheme ? this.cacheDarkAcrylicTextures : this.cacheLightAcrylicTextures);\n          needGenerateAcrylic = false;\n        } else {\n          needGenerateAcrylic = true;\n        }\n      } else {\n        needGenerateAcrylic = false;\n        Object.assign(newTheme, {\n          acrylicTexture40: currTheme.acrylicTexture40,\n          acrylicTexture60: currTheme.acrylicTexture60,\n          acrylicTexture80: currTheme.acrylicTexture80\n        } as ReactUWP.ThemeType);\n      }\n    }\n    needGenerateAcrylic = needGenerateAcrylic && newTheme.useFluentDesign && this.props.needGenerateAcrylic;\n    return needGenerateAcrylic;\n  }",
          "type": "(newTheme: any) => boolean"
        },
        {
          "name": "addToast",
          "initializerText": " (toast: React.ReactNode) => {\n    this.toastWrapper.addToast(toast);\n  }",
          "type": "(toast: ReactNode) => void"
        },
        {
          "name": "updateToast",
          "initializerText": " (toastId: number, toast: React.ReactNode) => {\n    if (this.toastWrapper) this.toastWrapper.updateToast(toastId, toast);\n  }",
          "type": "(toastId: number, toast: ReactNode) => void"
        },
        {
          "name": "deleteToast",
          "initializerText": " (toastId: number) => {\n    this.state.currTheme.toasts[toastId] = void 0;\n  }",
          "type": "(toastId: number) => void"
        },
        {
          "name": "handleScrollReveal",
          "initializerText": " (e?: Event) => {\n    const { currTheme } = this.state;\n    for (const scrollReveal of currTheme.scrollReveals) {\n      const {\n        rootElm,\n        animated,\n        setEnterStyle,\n        setLeaveStyle,\n        props: {\n          topOffset,\n          bottomOffset\n        }\n      } = scrollReveal;\n      if (!rootElm) return;\n      const { top, height } = rootElm.getBoundingClientRect();\n      const { innerHeight } = window;\n\n      let isIn = false;\n      if (height > innerHeight) {\n        isIn = top < innerHeight - height * height && top > - height * 0.5;\n      } else {\n        isIn = top > 0 + topOffset && top + height + bottomOffset < innerHeight;\n      }\n      if (isIn) {\n        if (!animated) {\n          setEnterStyle();\n          scrollReveal.animated = true;\n        }\n      } else {\n        if (animated) {\n          setLeaveStyle();\n          scrollReveal.animated = false;\n        }\n      }\n    }\n  }",
          "type": "(e?: Event) => void"
        },
        {
          "name": "cleanLocalStorage",
          "initializerText": " () => {\n    localStorage.setItem(customLocalStorageName, \"\");\n  }",
          "type": "() => void"
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    }
  ],
  "type": "typeof \"D:/react-uwp/src/Theme/index\""
}